// Declare our variablesvar baseURL:String = "http://localhost/drupalbook";var gateway:String = baseURL + "/services/amfphp"var sessionId:String = "";var nodeId:Number = root.loaderInfo.parameters.node;var viewName:String = "videos";var id:String = root.loaderInfo.parameters.id;var connect:String = root.loaderInfo.parameters.connect;var selectedTeaser:Teaser = null;// Declare our Drupal connectionvar drupal:NetConnection = new NetConnection();drupal.objectEncoding = ObjectEncoding.AMF3;// Connect to the Drupal gatewaydrupal.connect( gateway );// Set up our responder with the callbacks.var responder:Responder = new Responder( onConnect, onError);// We do not want to scale the stage.stage.scaleMode = StageScaleMode.NO_SCALE;stage.align = StageAlign.TOP_LEFT;// Connect to Drupalfunction connectToDrupal(){	drupal.call("system.connect", responder);}// Initialize the MediaGatewayMediaGateway.initialize( id, connect, connectToDrupal );// Loads a Drupal node.function loadNode( nid:Number ){	// Set up our responder with the callbacks.	var nodeResponse:Responder = new Responder( onNodeLoad, onError);	// Call Drupal to get the node.	drupal.call( "node.get", nodeResponse, sessionId, nid );}// Loads a Drupal view.function loadView( _viewName:String ){	// Set up the responder with the callbacks.	var viewResponse:Responder = new Responder( onViewLoad, onError );		// Call Drupal to load the view.	drupal.call( "views.get", viewResponse, sessionId, _viewName );}// Called when Drupal returns with our node.function onNodeLoad( node:Object ){	// Print out the node title.	title.text = node.title;			// Declare our base URL.	var fileURL:String = baseURL;			// Add our file’s relative path.	fileURL += "/";		// Declare a generic media player.	var player = null;		// If this node has audio.	if( node.audio ) {				// Declare our player as an AudioPlayer.		fileURL += node.audio.file.filepath;		player = new AudioPlayer();	}	else if( node.field_video ) {				// Declare our player as a VideoPlayer.		fileURL += node.field_video[0]["filepath"];		player = new VideoPlayer();			}	// Add the player to the stage.	media.addChild( player );	// Add a control bar.	addControlBar();	// Play our audio file	player.load( fileURL );}// Called when a view gets loaded.function onViewLoad( _view:Object ){	// Iterate through all of the nodes.	for each( var node:Object in _view )	{		// Declare our new teaser.		var teaser:Teaser = new Teaser();				// Add an event handler when this teaser is clicked.		teaser.addEventListener( Event.COMPLETE, onTeaserLoad );		teaser.addEventListener( MouseEvent.MOUSE_UP, onTeaserClick );						// Add our teaser to the list.		view.addItem( teaser );					// Load the node information into the teaser.		drupal.call( "node.get", teaser.responder, sessionId, node.nid );				}}// Add the control bar to the stage.function addControlBar(){	var controlBar:ControlBar = new ControlBar();	addChild( controlBar );}// Called when Drupal returns with a successful connection.function onConnect( result:Object ){	// Set our sessionId variable.	sessionId = result.sessid;			trace("We are connected!!!");	trace("Session Id: " + sessionId);			// If the node Id is valid...	if( nodeId ) {		// Load our node.		loadNode( nodeId );		}	else {		// Add a control bar.		addControlBar();	}		// If they provided a view name.	if( viewName ) {		// Load the view.		loadView( viewName );	}}// Called when a teaser loadsfunction onTeaserLoad( e:Event ){	if( !selectedTeaser ) {		loadTeaser( (e.target as Teaser) );	}}// Called when a teaser gets selected.function onTeaserClick( e:MouseEvent ){	// Load the selected teaser.	loadTeaser( e.target as Teaser );}// Function to load any teaser.function loadTeaser( teaser:Teaser ) {	// Deselect the selected teaser.	if( selectedTeaser ) {		selectedTeaser.setSelected( false );	}		// Set the new teaser and select it.	selectedTeaser = teaser;	selectedTeaser.setSelected( true );		// Load the node.	onNodeLoad( selectedTeaser.node );}// Called when an error occurs connecting to Drupal.function onError( error:Object ){	for each (var item in error) {		trace(item);   }}