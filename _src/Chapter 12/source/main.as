// Declare our variablesvar baseURL:String = "http://localhost/drupalbook";var gateway:String = baseURL + "/services/amfphp"var nodeId:Number = /*root.loaderInfo.parameters.node*/12;var apiKey:String = "b77dda3f11083aeb42b046d0b50a1848";// The current user.var user:Object = null;var currentNode:Object = null;// Set the uservote to user mode.uservote.setUserMode( true );// Instantiate our tabs.var i:Number = tabs.numChildren;while( i-- ) {	var tab:MovieClip = (tabs.getChildAt(i) as MovieClip);	tab.gotoAndStop("normal");	tab.addEventListener( MouseEvent.MOUSE_OVER, onTabHover );	tab.addEventListener( MouseEvent.MOUSE_OUT, onTabNormal );	tab.addEventListener( MouseEvent.MOUSE_DOWN, onTabNormal );	tab.addEventListener( MouseEvent.MOUSE_UP, onTabSelect );}// Set the view tab as the selected tab.var selectedTab:MovieClip = (tabs.getChildByName("view") as MovieClip);selectTab( selectedTab );// Called when a tab is hovered over.function onTabHover( event:MouseEvent ) {	// If we are not the selected tab, then change state.	if( event.target != selectedTab ) {		event.target.gotoAndStop( "hover" );	}	}// Called when a tab goes back to normal.function onTabNormal( event:MouseEvent ) {	// If we are not the selected tab, then change state.	if( event.target != selectedTab ) {			event.target.gotoAndStop( "normal" );	}	}// Called when a tab is selected.function onTabSelect( event:MouseEvent ) {	// Select this tab.	selectTab(event.target as MovieClip);	}// Selects a new tab.function selectTab( newTab:MovieClip ){	// Make the previous tab go to normal.	selectedTab.gotoAndStop("normal");		// Set the new selected tab.	selectedTab = newTab;		// Go to the selected state.	selectedTab.gotoAndStop( "selected" );		// Hide or show the editor or node view.	nodeMC.visible = (selectedTab.name == "view");	editor.visible = (selectedTab.name != "view");		uservote.visible = (selectedTab.name == "view");	rating.visible = (selectedTab.name == "view");		// Populate the editor title and body.	if( selectedTab.name == "edit" && currentNode ) {		editor.title.text = currentNode.title;		editor.body.htmlText = currentNode.body;	}	else {		editor.title.text = "";		editor.body.htmlText = "";	}			// Update the editor scroll bar.	editor.bodyScroll.update();}// Hide the welcome message.login.welcome.visible = false;// Add a listener when the user presses the Login button.login.submit.addEventListener( MouseEvent.CLICK, onLogin );// Add a listener when the user presses the Submit button.editor.submit.addEventListener( MouseEvent.CLICK, onNodeSubmit );// Declare our Drupal connectionvar drupal:DrupalService = new DrupalService( gateway, apiKey );// Connect to Drupaldrupal.connectToDrupal( onConnect );// Loads a Drupal node.function loadNode( nid:Number ){	// Call the Drupal service to load the node.	drupal.serviceCall( "node.get", onNodeLoad, null, nid );	}// Called when Drupal returns with our node.function onNodeLoad( node:Object ){	// Store the current node.	currentNode = node;		// Get the rating and user votes for this node.	rating.getVote( drupal, node.nid );	uservote.getVote( drupal, node.nid );	// Set the string of our body and title fields.	nodeMC.title.text = node.title;	nodeMC.body.htmlText = node.body;			// Update the node body scroll bar.	nodeMC.bodyScroll.update();}// Called when the user presses the submit button.function onNodeSubmit( event:MouseEvent ){	// Get the title and body text	var titleText:String = editor.title.text;	var bodyText:String = editor.body.text;			// Replace unwanted characters.	titleText = titleText.replace(/[\t\n\r\f]/,'');	bodyText = bodyText.replace(/[\t\n\r\f]/,'');			// Check to make sure they provide the title and body.	if( titleText.length && bodyText.length ) {		// Create a new node object.		var newNode:Object = new Object;				if( selectedTab.name == "edit" ) {			newNode.nid = currentNode.nid;		}						newNode.type = "page";		newNode.title = titleText;		newNode.body = bodyText;		drupal.serviceCall("node.save", onNodeCreate, onNodeError, newNode);	}	else {		login.status.text = "You must provide a title and body.";	}}// Called when a new node has been created.function onNodeError( error:Object ){	// Set the status to what happened.	login.status.text = error.faultString;	}// Called when a new node has been created.function onNodeCreate( nodeId:Number ){	// Make a call to get the node we just created.	drupal.serviceCall( "node.get", onNodeLoad, null, nodeId );	}// Called when Drupal returns with a successful connection.function onConnect( result:Object ){   // Set our current user.	setUser( result );		trace("We are connected!!!");	trace("Session Id: " + drupal.sessionId);			// Load our node.	loadNode( nodeId );	}// Used to set the current user.function setUser( result:Object ){	if( result is Boolean ) {		// Set our userId to 0		user.userid = 0;	}	else {		// Set our sessionId variable.		drupal.sessionId = result.sessid;					// Set the global variable.		user = result.user;	}		// Check to see if we are logged in.	if( user && user.userid > 0 ) {		// Welcome our user.		login.submit.label = "Logout";				login.welcome.visible = true;		login.welcome.username.text = user.name;		login.userpass.visible = false;			}	else {		// Show the login block.		login.submit.label = "Login";				login.welcome.visible = false;		login.userpass.visible = true;			}}// Called when an error occurs during login.function onUserError( error:Object ){	// Set the status to what happened.	login.status.text = error.description;}// Called when the user clicks the login button.function onLogin( event:MouseEvent ){	// Is the user logged out?	if( user && user.userid == 0 ) {			// Get the username and password.		var username:String = login.userpass.username.text;		var password:String = login.userpass.password.text;					// Replace unwanted characters.		username = username.replace(/[\t\n\r\f]/,'');		password = password.replace(/[\t\n\r\f]/,'');					// Check for the username and password		if( username.length && password.length ) {			drupal.serviceCall( "user.login", setUser, onUserError, username, password );		}		else {			login.status.text = "username and password required.";		}	}	else {		// Log out of Drupal.		drupal.serviceCall( "user.logout", setUser, onUserError );	}	}// Called when an error occurs connecting to Drupal.function onError( error:Object ){	for each (var item in error) {		trace(item);   }}