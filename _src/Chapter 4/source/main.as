// Declare our variablesvar baseURL:String = "http://localhost/drupalbook";var gateway:String = baseURL + "/services/amfphp"var sessionId:String = "";var nodeId:Number = 5;//root.loaderInfo.parameters.node;// Declare our imageLoader and imageSizevar imageLoader:Loader;var imageSize:Rectangle;// Declare our Drupal connectionvar drupal:NetConnection = new NetConnection();drupal.objectEncoding = ObjectEncoding.AMF3;// Connect to the Drupal gatewaydrupal.connect( gateway );// Set up our responder with the callbacks.var responder:Responder = new Responder( onConnect, onError);// Connect to Drupaldrupal.call("system.connect", responder);// Loads a Drupal node.function loadNode( nid:Number ){	// Set up our responder with the callbacks.	var nodeResponse:Responder = new Responder( onNodeLoad, onError);	// Call Drupal to get the node.	drupal.call( "node.get", nodeResponse, sessionId, nid );}// Called when Drupal returns with our node.function onNodeLoad( node:Object ){	// Print out the node title.	title.text = node.title;		// Print out the description.	description.htmlText = node.body;		// Show the ingredients and instructions.	ingredients.text = node.field_ingredients[0]["value"];	instructions.text = node.field_instructions[0]["value"];		// Update the scroll bars.	ingredientScroll.update();	instructionScroll.update();		// Load the image	var imagePath:String = baseURL;	imagePath += "/sites/default/files/imagecache/recipe_image/";	imagePath += node.field_recipe_image[0]["filename"];	loadImage( imagePath );}// Load an image into a movie clip.function loadImage( filepath:String ){	// If the filepath exists...	if( filepath ) {				// Instantiate our loader.		imageLoader = new Loader();				// Add our event listeners.		imageLoader.contentLoaderInfo.addEventListener( Event.COMPLETE, onImageLoaded );		imageLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onError);		imageLoader.addEventListener(IOErrorEvent.IO_ERROR, onError);						// Store the size of the image before loading.		imageSize = new Rectangle( image.x, image.y, image.width, image.height );							// Add this loader to the image MovieClip.		image.addChild( imageLoader );						// Load the image.		imageLoader.load(new URLRequest(filepath));				}}// Called when an image has finished loading.function onImageLoaded( event:Event ) {	// Determine our image ratio.	var imageRatio:Number = event.target.width / event.target.height;			// Set up our scaled rectangle by initializing it to the MovieClip size.	var scaledRect:Rectangle = new Rectangle( imageSize.x, imageSize.y, imageSize.width, imageSize.height );   	// Determine our MovieClip ratio.	var mcRatio:Number = (imageSize.width / imageSize.height);		// If the MovieClip ratio is greater than the image Ratio.	if( mcRatio > imageRatio )	{		// Set the scaled rect to be the same as the MovieClip height.		scaledRect.height = imageSize.height;				// The width is the MovieClip height multiplied by the image ratio.		scaledRect.width = Math.floor(imageSize.height * imageRatio);	}	else	{		// The scaled rectangle is the MovieClip width divided by the image ratio.		scaledRect.height = Math.floor(imageSize.width / imageRatio);				// The scaled rectangle is the same as the MovieClip width.		scaledRect.width = imageSize.width;	}		// Resize and center our image.	imageLoader.x += (imageSize.width - scaledRect.width) / 2;	imageLoader.y += (imageSize.height - scaledRect.height) / 2;	imageLoader.width = scaledRect.width;	imageLoader.height = scaledRect.height;}// Called when Drupal returns with a successful connection.function onConnect( result:Object ){	// Set our sessionId variable.	sessionId = result.sessid;			trace("We are connected!!!");	trace("Session Id: " + sessionId);			// Load our node.	loadNode( nodeId );	}// Called when an error occurs connecting to Drupal.function onError( error:Object ){	for each (var item in error) {		trace(item);   }}